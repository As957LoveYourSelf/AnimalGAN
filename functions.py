import torch.nn.functional as F
import torch
from torchvision.models import vgg19
from utils import get_yuv, rgb2yuv

vggpath = "../../pretrainmodels/vgg19-dcbb9e9d.pth"
vgg = vgg19().cuda()
pre = torch.load(vggpath)
vgg.load_state_dict(pre)
vgg = vgg[14:21]


def gram_matrix(features):
    assert (isinstance(features, torch.Tensor))
    assert (len(features.shape) == 4)
    b, c, h, w = features.shape
    org_f = torch.reshape(features, [b, c, h*w, -1])
    tran_f = torch.reshape(features, [b, c, -1, h*w])
    gram_mat = org_f*tran_f
    return (gram_mat*b)/(c*h*w)


def adversarial_loss(generator, discriminator):
    pass


def gram_loss(grayscale_style, generate_feature):
    """
    grayscale: origin grayscale image
    generate_feature: image generated by Generator
    """
    return F.l1_loss(gram_matrix(vgg(grayscale_style)), gram_matrix(generate_feature))


def content_loss(g_features, input_features):
    vgg_g = vgg(g_features)
    vgg_input = vgg(input_features)
    return F.l1_loss(vgg_g, vgg_input)


def color_loss(input_feature, generate_feature):
    yg, ug, vg = get_yuv(rgb2yuv(generate_feature))
    y, u, v = get_yuv(rgb2yuv(input_feature))

    loss = F.l1_loss(yg, y) + F.huber_loss(ug, u) + F.huber_loss(vg, v)
    return loss

